"Asm.fif" include

<{

 // Fixpoint operator.
 // let fix f =
 //   let rec g x = f [g x] x
 //   in g
 // [g x] is a delayed execution of g(x)
 // It will be used inside f.
 <{
   <{
                    // g stack:
                    // f g' x     // g' does not contain f on stack
     s2 PUSH        // f g' x f   // so we need to setup the g stack properly
     s2 PUSH        // f g' x f g'
     DUP            // f g' x f g' g'
     2 -1 SETCONTARGS // f g x g''
     s0 s2 XCHG     // f g'' x g'
     DROP           // f g'' x   , from now on, we assume g=g''
     s1 s2 XCHG     // g f x
     3 2 BLKPUSH    // g f x g f x
     SWAP           // g f x g x f
     2 1 CALLXARGS  // g f x (f g x)
     3 ROLLREV
     3 BLKDROP
   }> PUSHCONT      // f g
   DUP              // f g g
   2 -1 SETCONTARGS  // g' (f g is put on the stack of g')
 }> PUSHCONT
 2 SETGLOB    // global[2] = FIX operator

 // let rec sub n = if n > 1 then sub (n-1) else 1
 // let sub = fix (\sub -> \n -> if n > 1 then (sub (n-1)) else 1)
 10 INT

 // let rec inc n = inc (n + 1) -->
 // let inc = \inc . \n . inc (n + 1)
 <{
    // "inc" PRINTSTR
    DUMPSTK
    s0 PUSH
    1 INT
    GREATER         // f n (n>1?)
    <{ s0 PUSH      // f n n
       s1 PUSH
       1 INT
       SUB          // f n n (n-1)
       s3 PUSH      // f n n (n-1) f
       1 1 CALLXARGS  // f n n (f (n-1))
       MUL          // f n (n * (f (n - 1)))
    }> PUSHCONT
    <{ 1 INT }> PUSHCONT
    IFELSE
    NIP
    NIP
  }> PUSHCONT

 // let main = (fix inc) 10
 // Замена LetRec на Fix (Let ...) происходит в месте вызова функции.

 2 GETGLOB     // 10 f fix
 1 1 CALLXARGS // 10 [fix f]
 1 1 CALLXARGS
}>s runvmcode .s
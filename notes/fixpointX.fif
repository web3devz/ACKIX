// Fixpoint operator implementation for a function with arbitrary
// number of arguments.

"Asm.fif" include

<{
 // let fix f =
 //   let rec g x1 .. xn = f g x1 .. xn
 //   in g

 // Input:
 // f g' x1 .. xn   (g' does not contain f on stack)
 // Output:
 // (f g x1 .. xn)  i.e. result of applying f to g and x1 .. xn
 <{
   <{
                    // g stack:
                    // f g' x1 .. xn   // g' does not contain f on stack
     DEPTH          // f g' x1 .. xn n+2
     -2 ADDCONST    // f g' x1 .. xn n
     TUPLEVAR       // f g' (x1 .. xn)  // arguments packed into a tuple
     // So we reduced the problem to a fixpoint with a single argument modulo
     // unpacking the arguments before application
     s2 PUSH        // f g' x f   // so we need to setup the g stack properly
     s2 PUSH        // f g' x f g'
     DUP            // f g' x f g' g'
     2 -1 SETCONTARGS // f g x g''
     s0 s2 XCHG     // f g'' x g'
     DROP           // f g'' x   , from now on, we assume g=g''
     s1 s2 XCHG     // g f x
     15 EXPLODE     // g f x1 .. xn n
     ROLLX          // g x1 .. xn f
     DEPTH          // g x1 .. xn f n+2
     DEC            // g x1 .. xn f n+1     (f takes (g x1 .. xn) as arguments)
     TRUE           // g x1 .. xn f n+2 -1  (f may return something)
     CALLXVARARGS  // (f g x1 .. xn)
   }> PUSHCONT      // f g
   DUP              // f g g
   2 -1 SETCONTARGS  // g' (f g is put on the stack of g')
 }> PUSHCONT
 2 SETGLOB    // global[2] = FIX operator

 // Here, we show an example of using the operator on a function
 // consuming two arguments.

 20 INT
 10 INT
 // let rec sum n m = if (n > 0) then (n + sum (n - 1) m) else m
 // let sum = fixpoint \sum . \n . \m -> if (...)
 // s0 = sum
 // s1 = n
 // s2 = m
 <{ s1 PUSH
    0 INT
    GREATER
   <{
      s1 PUSH
      s1 PUSH
      s3 PUSH
      1 INT
      SUB
      s5 PUSH
      1 -1 SETCONTARGS
      1 -1 SETCONTARGS
      0 1 CALLXARGS
      ADD
   }> PUSHCONT
   <{ s0 PUSH }> PUSHCONT
   IFELSE
 }> PUSHCONT

 // let main = sum 10 20
 2 GETGLOB     // 10 20 f' fix
 1 1 CALLXARGS // 10 20 (fix f')
 1 -1 SETCONTARGS // 10 ((fix f) 20)
 1 -1 SETCONTARGS // ((fix f) 20 10)
 0 1 CALLXARGS // eval
}>s 1000000 gasrunvmcode .s